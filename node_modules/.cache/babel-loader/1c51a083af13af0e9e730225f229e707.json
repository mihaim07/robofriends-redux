{"ast":null,"code":"import { apiCall } from './api/api';\nimport { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  apiCall('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["C:/Work/Web/robofriends-redux/robofriends/src/actions.js"],"names":["apiCall","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","then","response","json","data","catch","error"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SACCC,kBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,qBAJD,QAKO,gBALP;AAQA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACxCC,EAAAA,IAAI,EAAEN,kBADkC;AAExCO,EAAAA,OAAO,EAAEF;AAF+B,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAF,EAAAA,OAAO,CAAC,4CAAD,CAAP,CACMW,IADN,CACWC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADtB,EAEMF,IAFN,CAEWG,IAAI,IAAIJ,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,IAAAA,OAAO,EAAEM;AAAzC,GAAD,CAF3B,EAGMC,KAHN,CAGYC,KAAK,IAAIN,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEH,qBAAR;AAA+BI,IAAAA,OAAO,EAAEQ;AAAxC,GAAD,CAH7B;AAIA,CANM","sourcesContent":["import { apiCall } from './api/api'\r\nimport { \r\n\tCHANGE_SEARCHFIELD, \r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCHFIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING})\r\n\tapiCall('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}"]},"metadata":{},"sourceType":"module"}